// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// add
double add(double a, double b);
RcppExport SEXP _cpptest_add(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(add(a, b));
    return rcpp_result_gen;
END_RCPP
}
// do_double
double do_double(double x);
RcppExport SEXP _cpptest_do_double(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(do_double(x));
    return rcpp_result_gen;
END_RCPP
}
// modify_std_vector
std::vector<double> modify_std_vector(std::vector<double> vector);
RcppExport SEXP _cpptest_modify_std_vector(SEXP vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type vector(vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(modify_std_vector(vector));
    return rcpp_result_gen;
END_RCPP
}
// get_array
void get_array();
RcppExport SEXP _cpptest_get_array() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    get_array();
    return R_NilValue;
END_RCPP
}
// push_array
std::vector<double> push_array(std::vector<double> arr);
RcppExport SEXP _cpptest_push_array(SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(push_array(arr));
    return rcpp_result_gen;
END_RCPP
}
// push_list_arrays
std::list< std::vector<double> > push_list_arrays(std::list< std::vector<double> > lst);
RcppExport SEXP _cpptest_push_list_arrays(SEXP lstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::list< std::vector<double> > >::type lst(lstSEXP);
    rcpp_result_gen = Rcpp::wrap(push_list_arrays(lst));
    return rcpp_result_gen;
END_RCPP
}
// runModel
std::vector<double> runModel(std::vector<double> basePop, std::vector<double> ageGroupsSpan, int timeArtStart, SEXP entrantPrev, std::vector<double> vertTransLag, std::vector<double> paedSurveyLag, bool populationAdjust, std::vector<double> entrantPop, std::vector<double> birthLag, std::vector<double> cumSurv, std::vector<double> cumNetMigr, double netMigrHivProb, std::vector<double> paedSurvCd4Distrib, SEXP entrantArtCoverage, std::vector<double> paedSurvArtCd4Distrib, int timeSteps);
RcppExport SEXP _cpptest_runModel(SEXP basePopSEXP, SEXP ageGroupsSpanSEXP, SEXP timeArtStartSEXP, SEXP entrantPrevSEXP, SEXP vertTransLagSEXP, SEXP paedSurveyLagSEXP, SEXP populationAdjustSEXP, SEXP entrantPopSEXP, SEXP birthLagSEXP, SEXP cumSurvSEXP, SEXP cumNetMigrSEXP, SEXP netMigrHivProbSEXP, SEXP paedSurvCd4DistribSEXP, SEXP entrantArtCoverageSEXP, SEXP paedSurvArtCd4DistribSEXP, SEXP timeStepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type basePop(basePopSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ageGroupsSpan(ageGroupsSpanSEXP);
    Rcpp::traits::input_parameter< int >::type timeArtStart(timeArtStartSEXP);
    Rcpp::traits::input_parameter< SEXP >::type entrantPrev(entrantPrevSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type vertTransLag(vertTransLagSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type paedSurveyLag(paedSurveyLagSEXP);
    Rcpp::traits::input_parameter< bool >::type populationAdjust(populationAdjustSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type entrantPop(entrantPopSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type birthLag(birthLagSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cumSurv(cumSurvSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cumNetMigr(cumNetMigrSEXP);
    Rcpp::traits::input_parameter< double >::type netMigrHivProb(netMigrHivProbSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type paedSurvCd4Distrib(paedSurvCd4DistribSEXP);
    Rcpp::traits::input_parameter< SEXP >::type entrantArtCoverage(entrantArtCoverageSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type paedSurvArtCd4Distrib(paedSurvArtCd4DistribSEXP);
    Rcpp::traits::input_parameter< int >::type timeSteps(timeStepsSEXP);
    rcpp_result_gen = Rcpp::wrap(runModel(basePop, ageGroupsSpan, timeArtStart, entrantPrev, vertTransLag, paedSurveyLag, populationAdjust, entrantPop, birthLag, cumSurv, cumNetMigr, netMigrHivProb, paedSurvCd4Distrib, entrantArtCoverage, paedSurvArtCd4Distrib, timeSteps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cpptest_add", (DL_FUNC) &_cpptest_add, 2},
    {"_cpptest_do_double", (DL_FUNC) &_cpptest_do_double, 1},
    {"_cpptest_modify_std_vector", (DL_FUNC) &_cpptest_modify_std_vector, 1},
    {"_cpptest_get_array", (DL_FUNC) &_cpptest_get_array, 0},
    {"_cpptest_push_array", (DL_FUNC) &_cpptest_push_array, 1},
    {"_cpptest_push_list_arrays", (DL_FUNC) &_cpptest_push_list_arrays, 1},
    {"_cpptest_runModel", (DL_FUNC) &_cpptest_runModel, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_cpptest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
